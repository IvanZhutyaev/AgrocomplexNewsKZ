import os
from datetime import datetime

import requests
import json
from bs4 import BeautifulSoup
from config import SITE_URL, SITE_LOGIN, SITE_PASSWORD
import re
session = requests.Session()


def login_to_site() -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Voyager"""
    login_url = f"{SITE_URL}/admin/login"
    try:
        print("üîë –í—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")

        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
        login_page = session.get(login_url, timeout=10)
        soup = BeautifulSoup(login_page.text, "html.parser")
        token_tag = soup.find("input", {"name": "_token"})
        csrf_token = token_tag["value"] if token_tag else None

        if not csrf_token:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω CSRF —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞")
            return False

        data = {
            "email": SITE_LOGIN,
            "password": SITE_PASSWORD,
            "_token": csrf_token
        }

        resp = session.post(login_url, data=data, timeout=10)
        if "voyager-dashboard" in resp.text or "logout" in resp.text:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def extract_title_and_body(text: str):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.strip()

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    if "\n\n" in text:
        parts = text.split("\n\n", 1)
        title = parts[0].strip()
        body = parts[1].strip()
    else:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        lines = text.split("\n")
        if len(lines) > 1:
            title = lines[0].strip()
            body = "\n".join(lines[1:]).strip()
        else:
            # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
            title = text
            body = ""

    # –û—á–∏—â–∞–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = re.sub(r'\s+', ' ', title)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    title = title[:80]  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

    # –û—á–∏—â–∞–µ–º —Ç–µ–ª–æ —Ç–µ–∫—Å—Ç–∞
    body = re.sub(r'\s+', ' ', body)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω

    print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ ({len(title)} —Å–∏–º–≤–æ–ª–æ–≤): {title}")
    print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìÑ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ({len(body[:120])} —Å–∏–º–≤–æ–ª–æ–≤): {body[:120]}...")

    return title, body

def get_csrf_token_for_create() -> str:
    """–ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    create_url = f"{SITE_URL}/admin/news/create"
    try:
        resp = session.get(create_url, timeout=10)
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è: {resp.status_code}")
            return None

        soup = BeautifulSoup(resp.text, "html.parser")

        # –ò—â–µ–º –í–°–ï —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        forms = soup.find_all('form')
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(forms)}")

        for i, form in enumerate(forms):
            action = form.get('action', '')
            method = form.get('method', '')
            print(f"  –§–æ—Ä–º–∞ {i + 1}: action='{action}', method='{method}'")

        # –ò—â–µ–º —Ñ–æ—Ä–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º action (–æ–±—ã—á–Ω–æ action='' –∏–ª–∏ action='/admin/news')
        target_form = None
        for form in forms:
            action = form.get('action', '')
            # –ò—â–µ–º —Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ logout –∏ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ action
            if 'logout' not in action and not action.startswith('/admin/logout'):
                target_form = form
                break

        if not target_form and forms:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ä–º—É
            target_form = forms[0]

        if not target_form:
            print("‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return None

        print("‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–∞")

        # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–µ
        token_tag = target_form.find("input", {"name": "_token"})
        if token_tag:
            csrf_token = token_tag["value"]
            print(f"‚úÖ CSRF —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {csrf_token[:20]}...")
            return csrf_token

        print("‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ")
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def post_news_to_site_simple(news_text: str, image_path: str = None) -> bool:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not login_to_site():
        return False

    csrf_token = get_csrf_token_for_create()
    if not csrf_token:
        return False

    create_url = f"{SITE_URL}/admin/news"
    title, body = extract_title_and_body(news_text)

    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –í–°–ï–• translatable –ø–æ–ª–µ–π Voyager...")
    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞: {create_url}")

    # –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –î–õ–ò–ù–´ –î–õ–Ø –ü–û–õ–ï–ô VOYAGER:
    title = title[:80]
    subtitle = body[:120].strip()
    if len(body) > 120:
        subtitle += "..."
    seo_title = title[:55]
    seo_description = body[:155].strip()
    if len(body) > 155:
        seo_description += "..."
    seo_keywords = "–∞–≥—Ä–æ, —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, –ê–ü–ö, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞"

    print(f"üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π:")
    print(f"  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {len(title)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: {len(subtitle)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  - SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫: {len(seo_title)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  - SEO –æ–ø–∏—Å–∞–Ω–∏–µ: {len(seo_description)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –í–°–ï–• translatable –ø–æ–ª–µ–π –≤ Voyager
    data = {
        "_token": csrf_token,
        "i18n_selector": "ru",

        # –í–°–ï translatable –ø–æ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Voyager
        "title_i18n": json.dumps({"ru": title, "kk": "", "en": "", "zh": ""}),
        "subtitle_i18n": json.dumps({"ru": subtitle, "kk": "", "en": "", "zh": ""}),
        "description_i18n": json.dumps({"ru": body, "kk": "", "en": "", "zh": ""}),
        "seo_title_i18n": json.dumps({"ru": seo_title, "kk": "", "en": "", "zh": ""}),
        "seo_description_i18n": json.dumps({"ru": seo_description, "kk": "", "en": "", "zh": ""}),
        "seo_keywords_i18n": json.dumps({"ru": seo_keywords, "kk": "", "en": "", "zh": ""}),

        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        "title": title,
        "subtitle": subtitle,
        "description": body,
        "seo_title": seo_title,
        "seo_description": seo_description,
        "seo_keywords": seo_keywords,

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        "status": "PUBLISHED",
        "published_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        "redirect_to": "",
        "model_name": "App\\Models\\News",
        "model_id": "",
        "type_slug": "news",
    }

    files = {}
    if image_path and os.path.exists(image_path):
        try:
            print("üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏:")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            image_filename = os.path.basename(image_path)

            # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            files["image"] = (image_filename, open(image_path, "rb"), 'image/jpeg')
            print(f"  ‚úÖ image –∫–∞–∫ '{image_filename}'")

            # –í–∞—Ä–∏–∞–Ω—Ç 2: SEO –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            files["seo_image"] = (f"seo_{image_filename}", open(image_path, "rb"), 'image/jpeg')
            print(f"  ‚úÖ seo_image –∫–∞–∫ 'seo_{image_filename}'")

            # –í–∞—Ä–∏–∞–Ω—Ç 3: image_uri (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–æ)
            files["image_uri"] = (f"uri_{image_filename}", open(image_path, "rb"), 'image/jpeg')
            print(f"  ‚úÖ image_uri –∫–∞–∫ 'uri_{image_filename}'")

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    else:
        print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")

    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–∞–º–∏...")
        response = session.post(create_url, data=data, files=files, timeout=30)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file_obj in files.values():
            if hasattr(file_obj[1], 'close'):
                file_obj[1].close()

        print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

        if response.status_code == 500:
            print("‚ùå –û—à–∏–±–∫–∞ 500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            error_content = response.text
            with open("error_image_upload.html", "w", encoding="utf-8") as f:
                f.write(error_content)
            print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ error_image_upload.html")

            return False

        if response.status_code in (200, 302):
            if response.status_code == 302:
                location = response.headers.get('Location', '')
                if 'admin/news' in location or 'success' in location.lower():
                    print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π)!")
                    return True
                else:
                    print(f"‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {location}")
                    return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            success_indicators = ['—É—Å–ø–µ—Ö', 'success', '—Å–æ–∑–¥–∞–Ω', 'created']
            if any(indicator in response.text.lower() for indicator in success_indicators):
                print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                return True

            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
            error_indicators = ['error', '–æ—à–∏–±–∫–∞', 'exception', 'invalid']
            if not any(indicator in response.text.lower() for indicator in error_indicators):
                print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ (–Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ)!")
                return True

            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return False

def post_news_to_site(news_text: str, image_path: str = None) -> bool:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    return post_news_to_site_simple(news_text, image_path)


def post_news_to_site_alternative(news_text: str, image_path: str = None) -> bool:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞"""
    if not login_to_site():
        return False

    csrf_token = get_csrf_token_for_create()
    if not csrf_token:
        return False

    create_url = f"{SITE_URL}/admin/news"
    title, body = extract_title_and_body(news_text)

    print("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä translatable –ø–æ–ª–µ–π...")

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä translatable –ø–æ–ª–µ–π
    data = {
        "_token": csrf_token,
        "i18n_selector": "ru",

        # –¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ translatable –ø–æ–ª—è
        "title_i18n": json.dumps({"ru": title, "kk": "", "en": "", "zh": ""}),
        "description_i18n": json.dumps({"ru": body, "kk": "", "en": "", "zh": ""}),

        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        "title": title,
        "description": body,
    }

    files = {}
    if image_path:
        try:
            files["image"] = open(image_path, "rb")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    try:
        response = session.post(create_url, data=data, files=files, timeout=20)

        if files:
            files["image"].close()

        print(f"üì° –û—Ç–≤–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {response.status_code}")

        if response.status_code in (200, 302):
            print("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
        return False



def check_required_fields():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"""
    if not login_to_site():
        return

    create_url = f"{SITE_URL}/admin/news/create"
    try:
        resp = session.get(create_url, timeout=10)
        soup = BeautifulSoup(resp.text, "html.parser")

        print("üîç –ü–æ–∏—Å–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:")

        # –ò—â–µ–º –ø–æ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º required
        required_fields = []
        all_inputs = soup.find_all('input')
        all_textareas = soup.find_all('textarea')
        all_selects = soup.find_all('select')

        for field in all_inputs + all_textareas + all_selects:
            if field.get('required'):
                name = field.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')
                required_fields.append(name)
                field_type = field.name
                print(f"‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {name} (—Ç–∏–ø: {field_type})")

        if not required_fields:
            print("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return required_fields

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π: {e}")
        return []