import os
import requests
import json
from datetime import datetime
from config import SITE_URL, SITE_LOGIN, SITE_PASSWORD
from translator_libre import translate_text

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_API_URL = "https://api.demo.agrosearch.kz/api"
# BASE_API_URL = "https://api.agrosearch.kz/api"  # –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
access_token = None


def truncate_text(text: str, max_length: int) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–ª–æ–≤–∞"""
    if not text or len(text) <= max_length:
        return text
    return text[:max_length - 3].rsplit(' ', 1)[0] + "..."


def login_to_api() -> bool:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    global access_token

    login_url = f"{BASE_API_URL}/auth/login"

    try:
        print("üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è –≤ API...")

        payload = {
            "email": SITE_LOGIN,
            "password": SITE_PASSWORD
        }

        headers = {
            "Content-Type": "application/json",
            "Accept-Language": "ru"
        }

        response = requests.post(login_url, json=payload, headers=headers, timeout=30)

        if response.status_code == 200:
            data = response.json()
            access_token = data.get("access_token")
            if access_token:
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ API")
                return True
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


def upload_image(image_path: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç–∏"""
    global access_token

    if not access_token:
        if not login_to_api():
            return None

    upload_url = f"{BASE_API_URL}/upload/image"

    try:
        print(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")

        if not os.path.exists(image_path):
            print(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return None

        with open(image_path, 'rb') as image_file:
            files = {'image': (os.path.basename(image_path), image_file, 'image/jpeg')}

            response = requests.post(upload_url, files=files, timeout=30)

            if response.status_code == 200:
                data = response.json()
                image_path_from_api = data.get("data", {}).get("path", "")

                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—É—Ç—å –æ—Ç API: {image_path_from_api}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Ç—å –æ—Ç API - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å tmp/images/ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if image_path_from_api.startswith("/storage/"):
                    image_path_from_api = image_path_from_api[9:]  # —É–¥–∞–ª—è–µ–º "/storage/"
                elif image_path_from_api.startswith("https://"):
                    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ–ª–Ω—ã–π URL, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                    from urllib.parse import urlparse
                    parsed_url = urlparse(image_path_from_api)
                    filename = os.path.basename(parsed_url.path)
                    image_path_from_api = f"tmp/images/{filename}"
                else:
                    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
                    image_path_from_api = f"tmp/images/{image_path_from_api}"

                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è image_uri: {image_path_from_api}")
                return image_path_from_api
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def translate_news_content(title: str, body: str) -> dict:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ç—Ä–∏ —è–∑—ã–∫–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤—ã—Ö 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–ª–∞ —Ç–µ–∫—Å—Ç–∞
    short_subtitle = truncate_text(body, 200)

    translations = {
        'ru': {
            'title': truncate_text(title, 255),
            'description': body,
            'subtitle': short_subtitle
        }
    }

    # –Ø–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    target_languages = ['en', 'kk', 'zh']

    for lang in target_languages:
        try:
            print(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ {lang}...")

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            translated_title = translate_text(translations['ru']['title'], lang)
            translated_title = truncate_text(translated_title, 255)

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            translated_description = translate_text(body, lang)

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∫–æ—Ä–æ—Ç–∫–∏–π)
            translated_subtitle = translate_text(short_subtitle, lang)
            translated_subtitle = truncate_text(translated_subtitle, 255)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤

            translations[lang] = {
                'title': translated_title,
                'description': translated_description,
                'subtitle': translated_subtitle
            }

            print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {lang} –∑–∞–≤–µ—Ä—à–µ–Ω")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {translated_title}")
            print(f"   –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: {translated_subtitle}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {lang}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
            translations[lang] = {
                'title': translations['ru']['title'],
                'description': translations['ru']['description'],
                'subtitle': translations['ru']['subtitle']
            }

    return translations


def extract_title_and_body(text: str):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ"""
    text = text.strip()

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    if "\n\n" in text:
        parts = text.split("\n\n", 1)
        title = parts[0].strip()
        body = parts[1].strip()
    else:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        lines = text.split("\n")
        if len(lines) > 1:
            title = lines[0].strip()
            body = "\n".join(lines[1:]).strip()
        else:
            # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
            title = text
            body = ""

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    title = truncate_text(title, 255)

    print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ ({len(title)} —Å–∏–º–≤–æ–ª–æ–≤): {title}")
    print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")

    return title, body


def create_news_api(title: str, description: str, subtitle: str, image_uri: str, translations: dict) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ API"""
    global access_token

    if not access_token:
        if not login_to_api():
            return False

    news_url = f"{BASE_API_URL}/content/news"

    try:
        print("üì§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ API...")

        # SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
        seo_keywords = {
            'ru': truncate_text("–∞–≥—Ä–æ, —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, –ê–ü–ö, –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞", 255),
            'en': truncate_text("agro, agriculture, agro-industrial complex, agricultural news", 255),
            'kk': truncate_text("–∞–≥—Ä–æ, –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã, –ê”ò–ö, –∞—É—ã–ª —à–∞—Ä—É–∞—à—ã–ª—ã“ì—ã –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä—ã", 255),
            'zh': truncate_text("ÂÜú‰∏ö, ÂÜú‰∏öÁªºÂêà‰ºÅ‰∏ö, ÂÜúÂ∑•ÁªºÂêà‰Ωì, ÂÜú‰∏öÊñ∞Èóª", 255)
        }

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª–∏–Ω—ã
        payload = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            "title": translations['ru']['title'],
            "description": translations['ru']['description'],
            "subtitle": translations['ru']['subtitle'],  # –ú–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            "image_uri": image_uri,

            # –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π
            "title_kk": translations['kk']['title'],
            "description_kk": translations['kk']['description'],
            "subtitle_kk": translations['kk']['subtitle'],

            # –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            "title_en": translations['en']['title'],
            "description_en": translations['en']['description'],
            "subtitle_en": translations['en']['subtitle'],

            # –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π
            "title_zh": translations['zh']['title'],
            "description_zh": translations['zh']['description'],
            "subtitle_zh": translations['zh']['subtitle'],

            # SEO –ø–æ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            "seo_title": truncate_text(translations['ru']['title'], 255),
            "seo_description": truncate_text(translations['ru']['subtitle'], 500),
            "seo_keywords": seo_keywords['ru'],
            "seo_image": image_uri,

            # SEO –ø–æ–ª—è –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º
            "seo_title_kk": truncate_text(translations['kk']['title'], 255),
            "seo_description_kk": truncate_text(translations['kk']['subtitle'], 500),
            "seo_keywords_kk": seo_keywords['kk'],

            # SEO –ø–æ–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            "seo_title_en": truncate_text(translations['en']['title'], 255),
            "seo_description_en": truncate_text(translations['en']['subtitle'], 500),
            "seo_keywords_en": seo_keywords['en'],

            # SEO –ø–æ–ª—è –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º
            "seo_title_zh": truncate_text(translations['zh']['title'], 255),
            "seo_description_zh": truncate_text(translations['zh']['subtitle'], 500),
            "seo_keywords_zh": seo_keywords['zh'],

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            "date_publication": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
            "Accept-Language": "ru"
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        critical_fields = {
            'title': payload['title'],
            'subtitle': payload['subtitle'],
            'title_kk': payload['title_kk'],
            'subtitle_kk': payload['subtitle_kk'],
            'title_en': payload['title_en'],
            'subtitle_en': payload['subtitle_en'],
            'title_zh': payload['title_zh'],
            'subtitle_zh': payload['subtitle_zh']
        }

        for field_name, field_value in critical_fields.items():
            if len(field_value) > 255:
                print(f"‚ö†Ô∏è –ü–æ–ª–µ {field_name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(field_value)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {field_value}")

        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫ RU: '{payload['title']}' ({len(payload['title'])} —Å–∏–º–≤.)")
        print(f"   –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ RU: '{payload['subtitle']}' ({len(payload['subtitle'])} —Å–∏–º–≤.)")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫ KK: '{payload['title_kk']}' ({len(payload['title_kk'])} —Å–∏–º–≤.)")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫ EN: '{payload['title_en']}' ({len(payload['title_en'])} —Å–∏–º–≤.)")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫ ZH: '{payload['title_zh']}' ({len(payload['title_zh'])} —Å–∏–º–≤.)")
        print(f"   Image URI: '{payload['image_uri']}'")

        response = requests.post(news_url, json=payload, headers=headers, timeout=30)

        print(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

        if response.status_code == 201:
            result_data = response.json()
            print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API!")
            print(f"üéâ ID –Ω–æ–≤–æ—Å—Ç–∏: {result_data.get('data', {}).get('id', 'N/A')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")

            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
            if response.status_code == 401:
                print("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è...")
                if login_to_api():
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    headers["Authorization"] = f"Bearer {access_token}"
                    response = requests.post(news_url, json=payload, headers=headers, timeout=30)

                    if response.status_code == 201:
                        print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                        return True

            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return False


def post_news_to_site(news_text: str, image_path: str = None) -> bool:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API"""

    # –®–∞–≥ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if not login_to_api():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ API")
        return False

    # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞
    title, body = extract_title_and_body(news_text)

    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_uri = None
    if image_path and os.path.exists(image_path):
        image_uri = upload_image(image_path)
        if not image_uri:
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        print("‚ö†Ô∏è –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –®–∞–≥ 4: –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    translations = translate_news_content(title, body)

    # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    subtitle = truncate_text(body, 200)  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    success = create_news_api(title, body, subtitle, image_uri, translations)

    if success:
        print("üéâ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ API!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ")

    return success


def post_news_to_site_simple(news_text: str, image_path: str = None) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)"""

    if not login_to_api():
        return False

    title, body = extract_title_and_body(news_text)

    image_uri = None
    if image_path and os.path.exists(image_path):
        image_uri = upload_image(image_path)

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π)
    short_subtitle = truncate_text(body, 200)
    translations = {
        'ru': {
            'title': title,
            'description': body,
            'subtitle': short_subtitle
        },
        'kk': {
            'title': title,
            'description': body,
            'subtitle': short_subtitle
        },
        'en': {
            'title': title,
            'description': body,
            'subtitle': short_subtitle
        },
        'zh': {
            'title': title,
            'description': body,
            'subtitle': short_subtitle
        }
    }

    return create_news_api(title, body, short_subtitle, image_uri, translations)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def login_to_site() -> bool:
    """–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return login_to_api()


def get_csrf_token_for_create() -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return ""


def check_required_fields():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return []
