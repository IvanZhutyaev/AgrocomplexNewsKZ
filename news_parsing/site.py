import requests
from bs4 import BeautifulSoup
from config import SITE_URL, SITE_LOGIN, SITE_PASSWORD

session = requests.Session()


def login_to_site() -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Voyager"""
    login_url = f"{SITE_URL}/admin/login"
    try:
        print("üîë –í—Ö–æ–¥–∏–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")

        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
        login_page = session.get(login_url, timeout=10)
        soup = BeautifulSoup(login_page.text, "html.parser")
        token_tag = soup.find("input", {"name": "_token"})
        csrf_token = token_tag["value"] if token_tag else None

        if not csrf_token:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω CSRF —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞")
            return False

        data = {
            "email": SITE_LOGIN,
            "password": SITE_PASSWORD,
            "_token": csrf_token
        }

        resp = session.post(login_url, data=data, timeout=10)
        if "voyager-dashboard" in resp.text or "logout" in resp.text:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def extract_title_and_body(text: str):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ"""
    parts = text.strip().split("\n\n", 1)
    title = parts[0].strip()
    body = parts[1].strip() if len(parts) > 1 else ""
    return title, body


def get_csrf_token_for_create() -> str:
    """–ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    create_url = f"{SITE_URL}/admin/news/create"
    try:
        resp = session.get(create_url, timeout=10)
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è: {resp.status_code}")
            return None
        soup = BeautifulSoup(resp.text, "html.parser")
        token_tag = soup.find("meta", {"name": "csrf-token"})
        token = token_tag["content"] if token_tag else None
        if not token:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ CSRF —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        return token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def post_news_to_site(news_text: str, image_path: str = None) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Voyager admin"""
    if not login_to_site():
        return False

    csrf_token = get_csrf_token_for_create()
    if not csrf_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
        return False

    create_url = f"{SITE_URL}/admin/news"
    title, body = extract_title_and_body(news_text)

    data = {
        "_token": csrf_token,
        "title_ru": title,
        "subtitle_ru": title,
        "description_ru": body,
        "seo_title_ru": title,
        "seo_description_ru": body[:160],
        "seo_keywords_ru": ", ".join(title.split()[:5]),
        "seo_url": "",
    }

    files = {}
    if image_path:
        try:
            files["image"] = open(image_path, "rb")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    try:
        response = session.post(create_url, data=data, files=files, timeout=20)

        if files:
            files["image"].close()

        if response.status_code in (200, 302):
            if "voyager/news" in response.text or response.status_code == 302:
                print("üåê –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")
                return True
            else:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å HTML:")
                soup = BeautifulSoup(response.text, "html.parser")
                title_tag = soup.title.text if soup.title else "–ù–µ—Ç —Ç–µ–≥–∞ <title>"
                print("–û—Ç–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", title_tag)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

    return False
