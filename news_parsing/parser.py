import asyncio
import feedparser
import requests
import re
import html
from bs4 import BeautifulSoup
from config import DEEPSEEK_KEY
from database import get_sites, is_news_sent, is_news_published, mark_news_sent
from bot import send_news_to_admin


# –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
def get_full_article(url: str) -> str:
    try:
        print(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é: {url}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        response = requests.get(url, timeout=10, headers=headers)
        response.encoding = response.apparent_encoding
        soup = BeautifulSoup(response.text, "html.parser")

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        selectors = [
            "article",
            "div.article",
            "div.content",
            "div.post-content",
            "div.entry-content",
            "div.story-text",
            "div.text",
            "main",
            "[role='main']",
            "div.news-text",
            "div.news-content",
            "div.news-detail",
            "div.detail-text",
            ".news__text",
            ".article__text",
            ".content__text",
            "div.news-body",
            "div.article-body"
        ]

        article = None
        for selector in selectors:
            found = soup.select(selector)
            if found:
                article = found[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –∏—â–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        if not article:
            # –ò—â–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            text_blocks = soup.find_all(['div', 'section'])
            text_blocks = [block for block in text_blocks if len(block.get_text(strip=True)) > 200]
            if text_blocks:
                article = max(text_blocks, key=lambda x: len(x.get_text(strip=True)))
                print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞")

        if article:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in article.find_all(['script', 'style', 'nav', 'header', 'footer', 'aside', 'form', 'iframe']):
                element.decompose()

            paragraphs = [p.get_text().strip() for p in article.find_all("p")]
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            paragraphs = [p for p in paragraphs if len(p) > 30]
            text = "\n\n".join(paragraphs).strip()

            if text:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, {len(text.split())} —Å–ª–æ–≤")
                return text
            else:
                print("‚ùå –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –Ω–æ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return ""
        else:
            print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return ""

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
        return ""


# –û—á–∏—Å—Ç–∫–∞ HTML –∏ –º—É—Å–æ—Ä–∞
def clean_text(text: str) -> str:
    text = re.sub(r'<[^>]+>', '', text)  # —É–¥–∞–ª—è–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
    text = html.unescape(text)  # –∑–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\s+\n', '\n', text)  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    text = re.sub(r'\n{3,}', '\n\n', text)  # –º–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥—Ä—è–¥
    return text.strip()


# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def limit_words(text: str, max_words: int = 180) -> str:
    words = text.split()
    if len(words) <= max_words:
        return text
    return " ".join(words[:max_words]) + "‚Ä¶"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def print_text_comparison(original_title: str, original_body: str, processed_text: str):
    print("\n" + "=" * 80)
    print("üìã –°–†–ê–í–ù–ï–ù–ò–ï –¢–ï–ö–°–¢–û–í:")
    print("=" * 80)

    print("\nüîπ –ò–°–•–û–î–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö:")
    print("-" * 40)
    print(original_title)

    print("\nüîπ –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:")
    print("-" * 40)
    if original_body and len(original_body.strip()) > 0:
        print(original_body[:500] + "..." if len(original_body) > 500 else original_body)
        print(f"(–î–ª–∏–Ω–∞: {len(original_body)} —Å–∏–º–≤–æ–ª–æ–≤, {len(original_body.split())} —Å–ª–æ–≤)")
    else:
        print("‚ùå –¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        print("(–î–ª–∏–Ω–∞: 0 —Å–∏–º–≤–æ–ª–æ–≤, 0 —Å–ª–æ–≤)")

    print("\nüîπ –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô –¢–ï–ö–°–¢ (DeepSeek):")
    print("-" * 40)
    print(processed_text)
    print(f"(–î–ª–∏–Ω–∞: {len(processed_text)} —Å–∏–º–≤–æ–ª–æ–≤, {len(processed_text.split())} —Å–ª–æ–≤)")

    print("\nüîπ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 40)
    original_words = len(original_body.split()) if original_body and len(original_body.strip()) > 0 else 0
    processed_words = len(processed_text.split())

    print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {original_words} ‚Üí {processed_words} —Å–ª–æ–≤")

    if original_words > 0:
        reduction_percent = ((original_words - processed_words) / original_words * 100)
        print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {reduction_percent:.1f}%")
    else:
        print("–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å (–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π)")

    print("=" * 80 + "\n")



# –î–ò–ü–°–ò–ö
def paraphrase_with_deepseek(title: str, body: str) -> str:
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek
    if not body or len(body.strip()) < 80:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ—Ä–æ–≥ —Å 50 –¥–æ 80
        print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(body)} —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        result = title
        print_text_comparison(title, body, result)
        return result

    try:
        prompt = f"""
        –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞. 
        –ü–µ—Ä–µ–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ñ–∞–∫—Ç—ã, –Ω–æ –∏–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. 

        ‚ÄºÔ∏è –í–∞–∂–Ω–æ:
        - –î–µ–ª–∞–π —Å–≤—è–∑–∞–Ω–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ç—å–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å. 
        - –û–±—ä—ë–º –æ—Ç 40 –¥–æ 60 —Å–ª–æ–≤.
        - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∞–∫–∏–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏, –≠–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ).
        - –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ä–µ–∫–ª–∞–º—É –∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ".
        - –î–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤—ã–µ –∞–±–∑–∞—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ.
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞/—Å–æ–±—ã—Ç–∏–µ, –∑–∞—Ç–µ–º –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑.
        - –°–æ—Ö—Ä–∞–Ω—è–π –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É: –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –∏–º–µ–Ω–∞, —Å—É–º–º—ã.
        - –ü–∏—à–∏ —è—Å–Ω—ã–º, –∂–∏–≤—ã–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Å—Ç–∏–ª–µ–º, –∫–∞–∫ –¥–ª—è –¥–µ–ª–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
        - –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç –∑–≤–µ–∑–¥–æ—á–∫–∏ "*"
        - –ù–µ –ø–∏—à–∏ "–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ë–ª–∞ –±–ª–∞, –¢–µ–∫—Å—Ç: –ë–ª–∞ –ë–ª–∞ –ë–ª–∞" - –ü–∏—à–∏ —Å—Ä–∞–∑—É –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ò —á–µ—Ä–µ–∑ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç
        - –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –¥–æ–±–æ–≤–ª—è–π —Å–º–∞–π–ª–∏–∫–∏
        - –£–±–∏—Ä–∞–π –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä —É–±–∏—Ä–∞–π "–ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –¥–ª—è, –∏ —Ç–¥"
        - –î–µ–ª–∞–π –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ –±—ã –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∏—Ç—å –∏–Ω—Ñ–æ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–Ω–∞ —á–∏—Ç–∞–ª–∞—Å—å —É–¥–æ–±–Ω–µ–µ

        –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
        –¢–µ–∫—Å—Ç: {body}
        """
        response = requests.post(
            "https://api.deepseek.com/chat/completions",
            headers={
                "Authorization": f"Bearer {DEEPSEEK_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞."},
                    {"role": "user", "content": prompt}
                ]
            },
            timeout=30
        )
        data = response.json()
        if "choices" in data and len(data["choices"]) > 0:
            message = data["choices"][0].get("message", {})
            text = message.get("content", "")
            text = clean_text(text)
            processed_text = limit_words(text, 180)

            # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
            print_text_comparison(title, body, processed_text)

            return processed_text
        else:
            print("DeepSeek ERROR:", data)
            fallback_text = limit_words(clean_text(f"{title}\n\n{body}"), 180)
            print_text_comparison(title, body, fallback_text)
            return fallback_text
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek: {e}")
        fallback_text = title  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        print_text_comparison(title, body, fallback_text)
        return fallback_text


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
async def process_entry(entry):
    title = getattr(entry, "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    link = getattr(entry, "link", "")

    print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å: {title}")
    print(f"üîó –°—Å—ã–ª–∫–∞: {link}")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS (—á–∞—Å—Ç–æ —Ç–∞–º –µ—Å—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç)
    rss_description = getattr(entry, "summary", getattr(entry, "description", ""))
    if rss_description:
        # –û—á–∏—â–∞–µ–º HTML –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        rss_description = clean_text(rss_description)
        print(f"üìù RSS –æ–ø–∏—Å–∞–Ω–∏–µ: {len(rss_description)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü–æ—Ç–æ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    full_article = get_full_article(link)

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—Å—Ç–∞
    if full_article and len(full_article) > 100:
        body = full_article
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏")
    elif rss_description and len(rss_description) > 50:
        body = rss_description
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ RSS –æ–ø–∏—Å–∞–Ω–∏—è")
    else:
        body = ""
        print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Å—Ç–∞—Ç—å–µ, –Ω–∏ –≤ RSS")

    return paraphrase_with_deepseek(title, body)


# –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∏–¥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async def parse_feed_and_process(url: str, limit: int = 5) -> int:
    feed = feedparser.parse(url)
    processed_count = 0

    for entry in feed.entries[:limit]:
        link = getattr(entry, "link", "")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if not await is_news_published(link):  # –ò–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
            news_text = await process_entry(entry)
            await send_news_to_admin(news_text, link)
            await mark_news_sent(link)  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            processed_count += 1
            await asyncio.sleep(1)

    return processed_count


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
async def check_news_and_send():
    sites = await get_sites()
    for url in sites:
        await parse_feed_and_process(url, limit=5)


# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def scheduler():
    while True:
        await check_news_and_send()
        await asyncio.sleep(600)