import asyncio
import os
import random
import hashlib
from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramNetworkError
from config import BOT_TOKEN, ADMINS

bot = Bot(token=BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
pending_raw_news = {}  # –î–ª—è —Å—ã—Ä—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
pending_processed_news = {}  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
admin_message_ids = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ admin_id


async def send_raw_news_to_admin(title: str, news_text: str, source_url: str):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            news_id = hashlib.md5(source_url.encode()).hexdigest()
            pending_raw_news[news_id] = {
                "url": source_url,
                "title": title,
                "text": news_text
            }

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"approve_raw|{news_id}")
            keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_raw|{news_id}")

            # –°–æ–∑–¥–∞–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = (
                f"<b>üì∞ –°—ã—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>\n\n"
                f"<b>üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n{title}\n\n"
                f"<b>üìÑ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:</b>\n{news_text}\n\n"
                f"<b>üîó –ò—Å—Ç–æ—á–Ω–∏–∫:</b>\n{source_url}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∞–¥–º–∏–Ω–∞–º
            sent_to_admins = 0
            for admin_id in ADMINS:
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ admin_id –∏ news_id
                    if admin_id not in admin_message_ids:
                        admin_message_ids[admin_id] = {}

                    message_ids = []

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    text_message = await bot.send_message(
                        admin_id,
                        message_text,
                        reply_markup=keyboard.as_markup(),
                        parse_mode="HTML"
                    )
                    message_ids.append(text_message.message_id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏
                    admin_message_ids[admin_id][news_id] = message_ids

                    print(f"‚úÖ –°—ã—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")
                    sent_to_admins += 1

                except TelegramForbiddenError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id} ‚Äî –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            if sent_to_admins > 0:
                print(f"üì® –°—ã—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_to_admins} –∞–¥–º–∏–Ω–∞–º")
                break

        except TelegramNetworkError as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—ã—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_raw_news_to_admin: {e}")
            break
async def send_processed_news_to_admin(news_text: str, source_url: str, original_title: str):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            import os
            import random
            image_files = os.listdir("images")
            image_path = os.path.join("images", random.choice(image_files)) if image_files else None

            news_id = hashlib.md5(f"{source_url}_processed".encode()).hexdigest()
            pending_processed_news[news_id] = {
                "url": source_url,
                "text": news_text,
                "image": image_path  # –î–æ–±–∞–≤–ª—è–µ–º image –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            }

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üåê –ù–∞ —Å–∞–π—Ç", callback_data=f"site|{news_id}")
            keyboard.button(text="‚úÖ –í Telegram", callback_data=f"approve|{news_id}")
            keyboard.button(text="üöÄ –û–±–∞", callback_data=f"both|{news_id}")
            keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{news_id}")

            # –°–æ–∑–¥–∞–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = (
                f"<b>‚úçÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>\n\n"
                f"<b>üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n{original_title}\n\n"
                f"<b>üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{news_text}\n\n"
                f"<b>üîó –ò—Å—Ç–æ—á–Ω–∏–∫:</b>\n{source_url}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∞–¥–º–∏–Ω–∞–º
            sent_to_admins = 0
            for admin_id in ADMINS:
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ admin_id –∏ news_id
                    if admin_id not in admin_message_ids:
                        admin_message_ids[admin_id] = {}

                    message_ids = []

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    text_message = await bot.send_message(
                        admin_id,
                        message_text,
                        reply_markup=keyboard.as_markup(),
                        parse_mode="HTML"
                    )
                    message_ids.append(text_message.message_id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏
                    admin_message_ids[admin_id][news_id] = message_ids

                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")
                    sent_to_admins += 1

                except TelegramForbiddenError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id} ‚Äî –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            if sent_to_admins > 0:
                print(f"üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_to_admins} –∞–¥–º–∏–Ω–∞–º")
                break

        except TelegramNetworkError as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_processed_news_to_admin: {e}")
            break
async def delete_news_messages(admin_id: int, news_id: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç—å—é —É –∞–¥–º–∏–Ω–∞"""
    try:
        if admin_id in admin_message_ids and news_id in admin_message_ids[admin_id]:
            message_ids = admin_message_ids[admin_id][news_id]
            deleted_count = 0

            for message_id in message_ids:
                try:
                    await bot.delete_message(admin_id, message_id)
                    deleted_count += 1
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            del admin_message_ids[admin_id][news_id]
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∞ {admin_id}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")


# –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
def get_pending_raw_news():
    return pending_raw_news


def get_pending_processed_news():
    return pending_processed_news


def remove_from_pending_raw_news(news_id):
    if news_id in pending_raw_news:
        pending_raw_news.pop(news_id, None)


def remove_from_pending_processed_news(news_id):
    if news_id in pending_processed_news:
        pending_processed_news.pop(news_id, None)