import asyncio
import time
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from bot import dp, on_startup
from parser import periodic_rss_check, process_queue_automatically


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    await on_startup()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    async def background_tasks():
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º RSS –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                await periodic_rss_check()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await process_queue_automatically()

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")

            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(background_tasks())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
