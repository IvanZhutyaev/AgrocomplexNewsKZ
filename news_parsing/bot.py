import asyncio
import os
import random
import hashlib
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramNetworkError
from aiogram.types import FSInputFile
from config import BOT_TOKEN, CHANNEL_ID, ADMINS
from database import init_db, add_site, remove_site, get_sites, is_news_sent, mark_news_sent
from site_poster import post_news_to_site
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
pending_news = {}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞–º
async def send_news_to_admin(news_text: str, source_url: str):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            image_files = os.listdir("images")
            if not image_files:
                print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ images")
                return

            image_path = os.path.join("images", random.choice(image_files))
            news_id = hashlib.md5(source_url.encode()).hexdigest()
            pending_news[news_id] = {"url": source_url, "image": image_path, "text": news_text}

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üåê –ù–∞ —Å–∞–π—Ç", callback_data=f"site|{news_id}")
            keyboard.button(text="‚úÖ –í Telegram", callback_data=f"approve|{news_id}")
            keyboard.button(text="üöÄ –û–±–∞", callback_data=f"both|{news_id}")
            keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{news_id}")

            photo = FSInputFile(image_path)
            admin_caption = f"{news_text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}"

            for admin_id in ADMINS:
                try:
                    if len(admin_caption) <= 1024:
                        await bot.send_photo(
                            admin_id,
                            photo,
                            caption=admin_caption,
                            reply_markup=keyboard.as_markup()
                        )
                    else:
                        await bot.send_photo(admin_id, photo, reply_markup=keyboard.as_markup())
                        await bot.send_message(admin_id, admin_caption)
                    print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")
                except TelegramForbiddenError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id} ‚Äî –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

        except TelegramNetworkError as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_news_to_admin: {e}")
            break

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("approve|"))
async def approve_news(callback: types.CallbackQuery):
    await callback.answer()

    _, news_id = callback.data.split("|", 1)
    data = pending_news.get(news_id)
    if not data:
        await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    news_text = data["text"]
    image_path = data["image"]

    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        await callback.message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return

    photo = FSInputFile(image_path)

    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    caption = news_text

    try:
        await bot.send_photo(CHANNEL_ID, photo, caption=caption, parse_mode="HTML")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª.")
        return

    await mark_news_sent(data["url"])
    pending_news.pop(news_id, None)

    try:
        await callback.message.delete()
    except Exception:
        pass

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
        except Exception:
            pass


@dp.callback_query(F.data.startswith("site|"))
async def post_to_site(callback: types.CallbackQuery):
    try:
        await callback.answer()
        _, news_id = callback.data.split("|", 1)
        data = pending_news.get(news_id)
        if not data:
            await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        success = post_news_to_site(data["text"], data["image"])
        if success:
            await mark_news_sent(data["url"])
            pending_news.pop(news_id, None)
            await callback.message.answer("üåê –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ post_to_site: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.")

@dp.callback_query(F.data.startswith("both|"))
async def post_to_both(callback: types.CallbackQuery):
    try:
        await callback.answer()
        _, news_id = callback.data.split("|", 1)
        data = pending_news.get(news_id)
        if not data:
            await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        image_path = data["image"]
        text = data["text"]

        # 1Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç
        success_site = post_news_to_site(text, image_path)

        # 2Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram
        try:
            photo = FSInputFile(image_path)
            await bot.send_photo(CHANNEL_ID, photo, caption=text, parse_mode="HTML")
            success_tg = True
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram:", e)
            success_tg = False

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if success_site and success_tg:
            await mark_news_sent(data["url"])
            pending_news.pop(news_id, None)
            await callback.message.answer("üöÄ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram –∏ –Ω–∞ —Å–∞–π—Ç–µ!")
        else:
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥).")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ post_to_both: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("reject|"))
async def reject_news(callback: types.CallbackQuery):
    try:
        await callback.answer()
    except Exception:
        pass

    _, news_id = callback.data.split("|", 1)
    pending_news.pop(news_id, None)

    try:
        await callback.message.delete()
        for admin_id in ADMINS:
            await bot.send_message(admin_id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception:
        pass

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

@dp.message(Command("start"))
async def cmd_start(message):
    if not is_admin(message.from_user.id):
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –ö–æ–º–∞–Ω–¥—ã:\n"
        "/addsite <url>\n"
        "/listsites\n"
        "/removesite <url>\n"
        "/postlatest"
    )

@dp.message(Command("addsite"))
async def cmd_add_site(message):
    if not is_admin(message.from_user.id):
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS")
        return
    await add_site(args[1])
    await message.answer(f"–°–∞–π—Ç {args[1]} –¥–æ–±–∞–≤–ª–µ–Ω!")

@dp.message(Command("listsites"))
async def cmd_list_sites(message):
    if not is_admin(message.from_user.id):
        return
    sites = await get_sites()
    if not sites:
        await message.answer("–°–∞–π—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        await message.answer("\n".join(sites))

@dp.message(Command("removesite"))
async def cmd_remove_site(message):
    if not is_admin(message.from_user.id):
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    await remove_site(args[1])
    await message.answer(f"–°–∞–π—Ç {args[1]} —É–¥–∞–ª—ë–Ω!")

@dp.message(Command("postlatest"))
async def cmd_post_latest(message):
    if not is_admin(message.from_user.id):
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return
    sites = await get_sites()
    if not sites:
        await message.answer("–°–∞–π—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        return
    posted = 0
    for url in sites:
        from parser import parse_feed_and_process
        news_count = await parse_feed_and_process(url, limit=1)
        posted += news_count
    if posted == 0:
        await message.answer("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ—Ç.")
    else:
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {posted} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")