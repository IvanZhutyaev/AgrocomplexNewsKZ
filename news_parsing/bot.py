import asyncio
import os
import random
import hashlib
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError, TelegramNetworkError
from aiogram.types import FSInputFile
from config import BOT_TOKEN, CHANNEL_ID, ADMINS
from database import init_db, add_site, remove_site, get_sites, is_news_sent, mark_news_sent, mark_news_published, \
    get_queue_size, clear_stuck_processing
from site_poster import post_news_to_site

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
pending_news = {}


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
async def send_news_to_admin(news_text: str, source_url: str):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            image_files = os.listdir("images")
            if not image_files:
                print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ images")
                return

            image_path = os.path.join("images", random.choice(image_files))
            news_id = hashlib.md5(source_url.encode()).hexdigest()
            pending_news[news_id] = {"url": source_url, "image": image_path, "text": news_text}

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üåê –ù–∞ —Å–∞–π—Ç", callback_data=f"site|{news_id}")
            keyboard.button(text="‚úÖ –í Telegram", callback_data=f"approve|{news_id}")
            keyboard.button(text="üöÄ –û–±–∞", callback_data=f"both|{news_id}")
            keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{news_id}")

            photo = FSInputFile(image_path)
            admin_caption = f"{news_text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∞–¥–º–∏–Ω–∞–º
            sent_to_admins = 0
            for admin_id in ADMINS:
                try:
                    if len(admin_caption) <= 1024:
                        await bot.send_photo(
                            admin_id,
                            photo,
                            caption=admin_caption,
                            reply_markup=keyboard.as_markup()
                        )
                    else:
                        await bot.send_photo(admin_id, photo, reply_markup=keyboard.as_markup())
                        await bot.send_message(admin_id, admin_caption)
                    print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")
                    sent_to_admins += 1
                except TelegramForbiddenError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id} ‚Äî –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            if sent_to_admins > 0:
                print(f"üì® –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_to_admins} –∞–¥–º–∏–Ω–∞–º")
                break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É

        except TelegramNetworkError as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                await asyncio.sleep(wait_time)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_news_to_admin: {e}")
            break


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("approve|"))
async def approve_news(callback: types.CallbackQuery):
    await callback.answer()

    _, news_id = callback.data.split("|", 1)
    data = pending_news.get(news_id)
    if not data:
        await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    news_text = data["text"]
    image_path = data["image"]

    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        await callback.message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return

    photo = FSInputFile(image_path)
    caption = news_text

    try:
        await bot.send_photo(CHANNEL_ID, photo, caption=caption, parse_mode="HTML")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:", e)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª.")
        return

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
    await mark_news_published(data["url"])
    pending_news.pop(news_id, None)

    try:
        await callback.message.delete()
    except Exception:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–æ–≤ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram.")
        except Exception:
            pass


@dp.callback_query(F.data.startswith("site|"))
async def post_to_site(callback: types.CallbackQuery):
    try:
        await callback.answer()
        _, news_id = callback.data.split("|", 1)
        data = pending_news.get(news_id)
        if not data:
            await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        success = post_news_to_site(data["text"], data["image"])
        if success:
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
            await mark_news_published(data["url"])
            pending_news.pop(news_id, None)
            await callback.message.answer("üåê –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–æ–≤ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            for admin_id in ADMINS:
                try:
                    await bot.send_message(admin_id, "üåê –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")
                except Exception:
                    pass
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ post_to_site: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.")


@dp.callback_query(F.data.startswith("both|"))
async def post_to_both(callback: types.CallbackQuery):
    try:
        await callback.answer()
        _, news_id = callback.data.split("|", 1)
        data = pending_news.get(news_id)
        if not data:
            await callback.message.answer("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        image_path = data["image"]
        text = data["text"]

        # 1Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞ —Å–∞–π—Ç
        success_site = post_news_to_site(text, image_path)

        # 2Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram
        try:
            photo = FSInputFile(image_path)
            await bot.send_photo(CHANNEL_ID, photo, caption=text, parse_mode="HTML")
            success_tg = True
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram:", e)
            success_tg = False

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if success_site or success_tg:  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
            await mark_news_published(data["url"])
            pending_news.pop(news_id, None)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–æ–≤ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            result_message = ""
            if success_site and success_tg:
                result_message = "üöÄ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram –∏ –Ω–∞ —Å–∞–π—Ç–µ!"
            elif success_site:
                result_message = "üåê –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ (Telegram –Ω–µ —É–¥–∞–ª–æ—Å—å)!"
            else:
                result_message = "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ Telegram (—Å–∞–π—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å)!"

            await callback.message.answer(result_message)
            for admin_id in ADMINS:
                try:
                    await bot.send_message(admin_id, result_message)
                except Exception:
                    pass
        else:
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥).")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ post_to_both: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
@dp.callback_query(F.data.startswith("reject|"))
async def reject_news(callback: types.CallbackQuery):
    try:
        await callback.answer("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    except Exception:
        pass

    _, news_id = callback.data.split("|", 1)
    data = pending_news.get(news_id)

    if data:
        pending_news.pop(news_id, None)

    try:
        await callback.message.delete()
    except Exception:
        pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except Exception:
            pass


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    help_text = """
ü§ñ *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–æ–≤–æ—Å—Ç–Ω—ã–º –ë–æ—Ç–æ–º*

*üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*/start* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
*/help* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

*üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RSS-–ª–µ–Ω—Ç–∞–º–∏:*
*/addsite <url>* - –¥–æ–±–∞–≤–∏—Ç—å RSS-–ª–µ–Ω—Ç—É
*/listsites* - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ RSS-–ª–µ–Ω—Ç—ã  
*/removesite <url>* - —É–¥–∞–ª–∏—Ç—å RSS-–ª–µ–Ω—Ç—É

*üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:*
*/queue* - —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
*/postnext* - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
*/skipnext* - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å
*/postlatest* - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏

*üì® –ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:*
–ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:
‚Ä¢ üåê *–ù–∞ —Å–∞–π—Ç* - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–π—Ç–µ
‚Ä¢ ‚úÖ *–í Telegram* - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ Telegram  
‚Ä¢ üöÄ *–û–±–∞* - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–µ–∑–¥–µ
‚Ä¢ ‚ùå *–û—Ç–∫–ª–æ–Ω–∏—Ç—å* - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å

*‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫:*
1. –ù–æ–≤–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑
3. –ù–æ–≤–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
4. –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –∂–¥–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ RSS-–ª–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /addsite
    """

    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    help_text = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*

*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ RSS-–ª–µ–Ω—Ç:*
`/addsite https://example.com/rss` - –¥–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω—Ç—É
`/listsites` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ª–µ–Ω—Ç—ã
`/removesite https://example.com/rss` - —É–¥–∞–ª–∏—Ç—å –ª–µ–Ω—Ç—É

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:*
`/queue` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∂–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
`/postnext` - –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
`/skipnext` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≤–∏—Å—à—É—é –Ω–æ–≤–æ—Å—Ç—å
`/postlatest` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ RSS-–ª–µ–Ω—Ç—ã

*–ü—Ä–∏–º–µ—Ä—ã RSS-–ª–µ–Ω—Ç:*
‚Ä¢ https://www.agroinvestor.ru/news/rss/
‚Ä¢ https://www.agronews.ru/rss/news.xml
‚Ä¢ https://www.agroxxi.ru/export/rss.xml

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É RSS-–ª–µ–Ω—Ç—É!
    """

    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("addsite"))
async def cmd_add_site(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/addsite https://example.com/rss`",
                             parse_mode="Markdown")
        return

    url = args[1].strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith(('http://', 'https://')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        return

    try:
        await add_site(url)
        await message.answer(f"‚úÖ RSS-–ª–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n`{url}`", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")


@dp.message(Command("listsites"))
async def cmd_list_sites(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    sites = await get_sites()
    if not sites:
        await message.answer("üì≠ RSS-–ª–µ–Ω—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n–ò—Å–ø–æ–ª—å–∑—É–π /addsite –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    sites_text = "üìã *–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ RSS-–ª–µ–Ω—Ç—ã:*\n\n"
    for i, site in enumerate(sites, 1):
        sites_text += f"{i}. `{site}`\n"

    sites_text += f"\n–í—Å–µ–≥–æ: {len(sites)} –ª–µ–Ω—Ç"
    await message.answer(sites_text, parse_mode="Markdown")


@dp.message(Command("removesite"))
async def cmd_remove_site(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RSS –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/removesite https://example.com/rss`",
                             parse_mode="Markdown")
        return

    url = args[1].strip()

    try:
        await remove_site(url)
        await message.answer(f"‚úÖ RSS-–ª–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞:\n`{url}`", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


@dp.message(Command("queue"))
async def cmd_queue_status(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    queue_size = await get_queue_size()
    pending_count = len(pending_news)

    status_text = (
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
        f"‚Ä¢ üì• –ù–æ–≤–æ—Å—Ç–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: *{queue_size}*\n"
        f"‚Ä¢ ‚è≥ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: *{pending_count}*\n"
        f"‚Ä¢ üë• –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: *{len(ADMINS)}*\n"
        f"\n*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é:*\n"
        f"`/postnext` - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å\n"
        f"`/skipnext` - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å\n"
        f"`/postlatest` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RSS\n"
        f"\n*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç:*\n"
        f"`/addsite <url>` - –¥–æ–±–∞–≤–∏—Ç—å RSS\n"
        f"`/listsites` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—ã"
    )

    await message.answer(status_text, parse_mode="Markdown")


@dp.message(Command("postnext"))
async def cmd_post_next(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    from parser import process_next_from_queue
    success = await process_next_from_queue()

    if success:
        await message.answer("‚úÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º!")
    else:
        await message.answer("‚ùå –í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")


@dp.message(Command("skipnext"))
async def cmd_skip_next(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å (–æ—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    await clear_stuck_processing()
    await message.answer("‚úÖ –ó–∞–≤–∏—Å—à–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã. –°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")


@dp.message(Command("postlatest"))
async def cmd_post_latest(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    sites = await get_sites()
    if not sites:
        await message.answer("‚ùå –°–∞–π—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π /addsite")
        return

    await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é RSS-–ª–µ–Ω—Ç—ã...")

    posted = 0
    for url in sites:
        from parser import parse_feed_and_process
        try:
            news_count = await parse_feed_and_process(url, limit=1)
            posted += news_count
            if news_count > 0:
                await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑:\n`{url}`", parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}:\n`{e}`", parse_mode="Markdown")

    if posted == 0:
        await message.answer("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ—Ç.")
    else:
        await message.answer(f"üéØ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {posted} –Ω–æ–≤–æ—Å—Ç–µ–π")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "–∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
        )
    else:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def initialize():
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


# –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def on_startup():
    await initialize()